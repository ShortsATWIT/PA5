import java.util.List;

public class IntVector {
	private int capacity;
	private int size;
	private int[] a;
	final private StringBuilder sb = new StringBuilder();

	public static int[] copyTo(int[] src, int[] dest, int n) {
		for (int i = 0; i < n; i++) {
			dest[i] = src[i];
		}
		return dest;
	}

	public static int doubleIfNeeded(int capacity, int size, int toAdd) {
		final int newSize = size + toAdd;
		while (capacity < newSize) {
			if (capacity == 0) {
				capacity = 1;
			} else {
				capacity *= 2;
			}
		}
		return capacity;
	}

	public IntVector() {
		this(10);
	}

	public IntVector(int initCapacity) {
		size = 0;
		if (initCapacity > 0) {
			capacity = initCapacity;
			a = new int[initCapacity];
		} else {
			capacity = 0;
			a = null;
		}
	}

	public IntVector(int initSize, int initValue) {
		if (initSize < 0) {
			initSize = 0;
		}
		size = capacity = initSize;
		if (capacity > 0) {
			a = new int[capacity];
			for (int i = 0; i < capacity; i++) {
				a[i] = initValue;
			}
		} else {
			a = null;
		}
	}

	public IntVector(int[] source) {
		if (source == null) {
			source = new int[] {};
		}
		size = capacity = source.length;
		if (size > 0) {
			a = copyTo(source, new int[size], size);
		} else {
			a = null;
		}
	}

	@Override
	public String toString() {
		sb.setLength(0);
		sb.append("[");
		if (a != null && size > 0) {
			sb.append(String.valueOf(a[0]));
			for (int i = 1; i < size; i++) {
				sb.append(String.format(", %d", a[i]));
			}
		}
		sb.append("]");
		return sb.toString();
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof IntVector) {
			final IntVector v = (IntVector) o;
			if (size == v.size) {
				for (int i = 0; i < size; i++) {
					if (a[i] != v.a[i]) {
						return false;
					}
				}
				return true;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}

	private boolean _validIndex(int index, boolean allowEnd) {
		if (!allowEnd) {
			return (index >= 0 && index < size);
		} else {
			return (index >= 0 && index <= size);
		}
	}

	public boolean validIndex(int index) {
		return _validIndex(index, false);
	}

	public int getSize() {
		return size;
	}

	public boolean isEmpty() {
		return size == 0;
	}

	public int getCapacity() {
		return capacity;
	}

	public Integer get(int index) {
		if (validIndex(index)) {
			return a[index];
		} else {
			return null;
		}
	}

	public int[] toArray() {
		return copyTo(a, new int[size], size);
	}

	public Integer set(int index, int value) {
		if (validIndex(index)) {
			return a[index] = value;
		} else {
			return null;
		}
	}

	public void reverse() {
		for (int i = 0; i < (size / 2); i++) {
			final int temp = a[i];
			final int oppIndex = (size - i - 1);
			a[i] = a[oppIndex];
			a[oppIndex] = temp;
		}
	}

	public void ensureCapacity(int n) {
		if (n > capacity) {
			if (a == null) {
				a = new int[n];
			} else {
				a = copyTo(a, new int[n], size);
			}
			capacity = a.length;
		}
	}

	public int add(int value) {
		ensureCapacity(doubleIfNeeded(capacity, size, 1));
		return (a[size++] = value);
	}

	public Integer add(int index, int value) {
		if (!_validIndex(index, true)) {
			return null;
		}
		ensureCapacity(doubleIfNeeded(capacity, size, 1));
		size++;
		for (int i = (size - 1); i > index; i--) {
			a[i] = a[i - 1];
		}
		a[index] = value;
		return value;
	}

	public void addAll(List<Integer> values) {
		ensureCapacity(doubleIfNeeded(capacity, size, values.size()));
		for (int v : values) {
			a[size++] = v;
		}
	}

	public void addAll(int index, List<Integer> values) {
		if (_validIndex(index, true)) {
			final int numToAdd = values.size();
			ensureCapacity(doubleIfNeeded(capacity, size, numToAdd));
			size += values.size();
			for (int i = (size - 1); i > (index + numToAdd - 1); i--) {
				a[i] = a[i - numToAdd];
			}
			for (int i = 0; i < numToAdd; i++) {
				a[index + i] = values.get(i);
			}
		}
	}

	public void clear() {
		size = 0;
	}

	public void trimToSize() {
		if (capacity != size) {
			if (size == 0) {
				a = null;
			} else {
				a = copyTo(a, new int[size], size);
			}
			capacity = size;
		}
	}

	public Integer removeLast() {
		if (size > 0) {
			return a[--size];
		} else {
			return null;
		}
	}

	public Integer remove(int index) {
		if (validIndex(index)) {
			final int value = a[index];
			for (int i = index; i < (size - 1); i++) {
				a[i] = a[i + 1];
			}
			size--;
			return value;
		} else {
			return null;
		}
	}

	public Integer removeFirst(int value) {
		for (int i = 0; i < size; i++) {
			if (a[i] == value) {
				return remove(i);
			}
		}
		return null;
	}

	public int removeAllIf(IntTester p) {
		final boolean[] b = new boolean[size];
		int count = 0;
		for (int i = 0; i < size; i++) {
			if (p.test(i, a[i])) {
				b[i] = true;
				count++;
			}
		}
		int removed = 0;
		for (int i = 0; i < b.length; i++) {
			if (b[i]) {
				remove(i - (removed++));
			}
		}
		return count;
	}

	public int removeAll(int value) {
		return removeAllIf((i, v) -> v == value);
	}
}
